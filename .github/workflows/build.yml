name: DGC-AutoBuild

on:
  release:
    types: [published, prereleased]
  workflow_dispatch:

jobs:
  build:
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: macos-13
            platform: macOS Intel
            filename: pylo-macos-amd64
          - os: macos-latest
            platform: macOS Apple Silicon
            filename: pylo-macos-arm64
          - os: ubuntu-latest
            platform: Linux Intel/AMD
            filename: pylo-linux-amd64
          - os: ubuntu-24.04-arm
            platform: Linux ARM
            filename: pylo-linux-arm64
          - os: windows-latest
            platform: Windows Intel/AMD
            filename: pylo-windows-amd64
          - os: windows-11-arm
            platform: Windows ARM
            filename: pylo-windows-arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Notify build start (pending)
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "pending",
              "progress": 0,
              "product": "pylo"
            }'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}

      - name: Notify progress 5%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 5,
              "product": "pylo"
            }'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Notify progress 10%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 10,
              "product": "pylo"
            }'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard pefile

      - name: Notify progress 20%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 20,
              "product": "pylo"
            }'

      - name: Generate Python Script for Release
        shell: bash
        run: |
          python builder.py ${{ github.event.release.tag_name || github.ref }}

      - name: Notify progress 25%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 25,
              "product": "pylo"
            }'

      - name: Build with Nuitka
        shell: bash
        run: |
          python -m nuitka \
            --standalone \
            --onefile \
            --output-dir=dist \
            --enable-plugin=pylint-warnings \
            --assume-yes-for-downloads \
            for-build.py

      - name: Notify progress 70%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 70,
              "product": "pylo"
            }'

      - name: Rename binary, Zip (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir upload
          filename="${{ matrix.filename }}"
          mv dist/for-build.bin "upload/${filename}"
          cd upload
          zip "${filename}.zip" "${filename}"

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $filename = "${{ matrix.filename }}"
          mkdir upload
          Move-Item -Path dist/for-build.exe -Destination "upload/$filename.exe"

      - name: Zip (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $filename = "${{ matrix.filename }}"
          Compress-Archive -Path "upload/$filename.exe" -DestinationPath "upload/$filename.zip"

      - name: Notify progress 80%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 80,
              "product": "pylo"
            }'

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Notify success
        if: success()
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "completed",
              "progress": 100,
              "product": "pylo"
            }'

      - name: Notify failure
        if: failure()
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "failed",
              "progress": 100,
              "product": "pylo"
            }'

  after:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ success() && (github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.GH_PAT }}

      - name: Set up Git
        run: |
          git config user.name "DGC-AutoBuild"
          git config user.email "bot@diamondgotcat.net"

      - name: Determine release tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          else
            tag="${{ github.ref_name }}"
          fi
          echo "TAG_NAME=$tag" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Update version.txt
        if: (github.event_name == 'release' && !github.event.release.prerelease) || github.event_name == 'workflow_dispatch'
        run: |
          echo "$TAG_NAME" > version.txt
          git add version.txt
          git commit -m "Update version.txt to $TAG_NAME" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          git push origin HEAD:main
